{"version":3,"file":"idb-cache.js","sources":["../tsc/idb-cache.js"],"sourcesContent":["/**\r\n * @author Drecom Co.,Ltd. http://www.drecom.co.jp/\r\n */\r\nconst VERSION = 1;\r\nconst STORE_NAME = {\r\n    META: 'metastore',\r\n    DATA: 'datastore',\r\n};\r\nconst DATA_TYPE = {\r\n    STRING: 1,\r\n    ARRAYBUFFER: 2,\r\n    BLOB: 3,\r\n};\r\n// iPhone/iPod/iPad\r\nconst isIOS = /iP(hone|(o|a)d);/.test(window.navigator.userAgent);\r\nexport default class IDBCache {\r\n    constructor(dbName, strageLimit) {\r\n        this._maxSize = 52428800; // 50MB\r\n        this._maxCount = 100; // 100files\r\n        this._defaultAge = 86400; // 1day\r\n        this._nowSize = 0;\r\n        this._metaCache = new Map();\r\n        this._indexedDB = window.indexedDB || window.webkitIndexedDB || window.mozIndexedDB || window.OIndexedDB || window.msIndexedDB;\r\n        this._dbName = dbName;\r\n        if (!this._indexedDB) {\r\n            console.error('IndexedDB is not supported');\r\n            return;\r\n        }\r\n        if (strageLimit) {\r\n            if (strageLimit.size)\r\n                this._maxSize = strageLimit.size;\r\n            if (strageLimit.count)\r\n                this._maxCount = strageLimit.count;\r\n            if (strageLimit.defaultAge)\r\n                this._defaultAge = strageLimit.defaultAge;\r\n        }\r\n        this._initialization = this._initialize();\r\n    }\r\n    /**\r\n     * Save key-value in IndexedDB.\r\n     * Overwrite if the key already exists.\r\n     * @param key\r\n     * @param value\r\n     * @param maxAge Number of seconds to keep\r\n     */\r\n    set(key, value, maxAge = this._defaultAge) {\r\n        return new Promise((resolve, reject) => {\r\n            this._serializeData(value, (data, meta) => {\r\n                if (meta.size === 0) {\r\n                    reject(IDBCache.ERROR.INVALID_ARGUMENT);\r\n                    return;\r\n                }\r\n                this._open((db) => {\r\n                    const transaction = db.transaction([STORE_NAME.META, STORE_NAME.DATA], 'readwrite');\r\n                    const metaStore = transaction.objectStore(STORE_NAME.META);\r\n                    const dataStore = transaction.objectStore(STORE_NAME.DATA);\r\n                    const nowSeconds = Math.floor(Date.now() / 1000);\r\n                    meta.expire = nowSeconds + maxAge;\r\n                    transaction.oncomplete = () => {\r\n                        transaction.oncomplete = null;\r\n                        transaction.onerror = null;\r\n                        transaction.onabort = null;\r\n                        const cacheMeta = this._metaCache.get(key);\r\n                        if (cacheMeta) {\r\n                            this._metaCache.delete(key);\r\n                            this._nowSize -= cacheMeta.size;\r\n                        }\r\n                        this._metaCache.set(key, meta);\r\n                        this._nowSize += meta.size;\r\n                        if (this._maxCount < this._metaCache.size || this._maxSize < this._nowSize) {\r\n                            this._cleanup();\r\n                        }\r\n                        resolve();\r\n                    };\r\n                    transaction.onerror = () => {\r\n                        transaction.oncomplete = null;\r\n                        transaction.onerror = null;\r\n                        transaction.onabort = null;\r\n                        reject(IDBCache.ERROR.REQUEST_FAILED);\r\n                    };\r\n                    transaction.onabort = () => {\r\n                        transaction.oncomplete = null;\r\n                        transaction.onerror = null;\r\n                        transaction.onabort = null;\r\n                        reject(IDBCache.ERROR.REQUEST_FAILED);\r\n                    };\r\n                    try {\r\n                        dataStore.put(data, key);\r\n                        metaStore.put(meta, key);\r\n                    }\r\n                    catch (e) {\r\n                        console.error(e);\r\n                        transaction.abort();\r\n                    }\r\n                }, (errorCode) => {\r\n                    // Open error\r\n                    reject(errorCode);\r\n                });\r\n            });\r\n        });\r\n    }\r\n    /**\r\n     * Get value from IndexedDB\r\n     * @param key\r\n     */\r\n    get(key) {\r\n        return new Promise((resolve, reject) => {\r\n            this._open((db) => {\r\n                const transaction = db.transaction(STORE_NAME.DATA, 'readonly');\r\n                const dataStore = transaction.objectStore(STORE_NAME.DATA);\r\n                const request = dataStore.get(key);\r\n                request.onsuccess = () => {\r\n                    request.onsuccess = null;\r\n                    request.onerror = null;\r\n                    const nowSeconds = Math.floor(Date.now() / 1000);\r\n                    const cacheMeta = this._metaCache.get(key);\r\n                    if (request.result && cacheMeta && nowSeconds < cacheMeta.expire) {\r\n                        this._deserializeData(request.result, cacheMeta, (data) => {\r\n                            resolve(data);\r\n                        });\r\n                    }\r\n                    else {\r\n                        // Can not find or expired\r\n                        reject(IDBCache.ERROR.GET_EMPTY);\r\n                    }\r\n                };\r\n                request.onerror = () => {\r\n                    request.onsuccess = null;\r\n                    request.onerror = null;\r\n                    reject(IDBCache.ERROR.REQUEST_FAILED);\r\n                };\r\n            }, (errorCode) => {\r\n                // Open error\r\n                reject(errorCode);\r\n            });\r\n        });\r\n    }\r\n    /**\r\n     *  Check if the key exists\r\n     *  @param key\r\n     */\r\n    has(key) {\r\n        if (!this._initialization) {\r\n            return Promise.reject(IDBCache.ERROR.NOT_SUPPORT_IDB);\r\n        }\r\n        return this._initialization.then(() => {\r\n            const cacheMeta = this._metaCache.get(key);\r\n            const nowSeconds = Math.floor(Date.now() / 1000);\r\n            return Boolean(cacheMeta && nowSeconds < cacheMeta.expire);\r\n        });\r\n    }\r\n    /**\r\n     * Delete one value of IndexedDB\r\n     * @param key\r\n     */\r\n    delete(key) {\r\n        return new Promise((resolve, reject) => {\r\n            this._open((db) => {\r\n                const transaction = db.transaction([STORE_NAME.META, STORE_NAME.DATA], 'readwrite');\r\n                const metaStore = transaction.objectStore(STORE_NAME.META);\r\n                const dataStore = transaction.objectStore(STORE_NAME.DATA);\r\n                transaction.oncomplete = () => {\r\n                    transaction.oncomplete = null;\r\n                    transaction.onerror = null;\r\n                    transaction.onabort = null;\r\n                    const cacheMeta = this._metaCache.get(key);\r\n                    if (cacheMeta) {\r\n                        this._metaCache.delete(key);\r\n                        this._nowSize -= cacheMeta.size;\r\n                    }\r\n                    resolve();\r\n                };\r\n                transaction.onerror = () => {\r\n                    transaction.oncomplete = null;\r\n                    transaction.onerror = null;\r\n                    transaction.onabort = null;\r\n                    reject(IDBCache.ERROR.REQUEST_FAILED);\r\n                };\r\n                transaction.onabort = () => {\r\n                    transaction.oncomplete = null;\r\n                    transaction.onerror = null;\r\n                    transaction.onabort = null;\r\n                    reject(IDBCache.ERROR.REQUEST_FAILED);\r\n                };\r\n                try {\r\n                    dataStore.delete(key);\r\n                    metaStore.delete(key);\r\n                }\r\n                catch (e) {\r\n                    console.error(e);\r\n                    transaction.abort();\r\n                }\r\n            }, (errorCode) => {\r\n                // Open error\r\n                reject(errorCode);\r\n            });\r\n        });\r\n    }\r\n    _initialize() {\r\n        return new Promise((resolve) => {\r\n            this._open((db) => {\r\n                const transaction = db.transaction(STORE_NAME.META, 'readonly');\r\n                const metaStore = transaction.objectStore(STORE_NAME.META);\r\n                this._metaCache.clear();\r\n                this._nowSize = 0;\r\n                let canGetAll = false;\r\n                if (metaStore.getAllKeys && metaStore.getAll) {\r\n                    canGetAll = true;\r\n                }\r\n                else {\r\n                    console.warn('This device does not support getAll');\r\n                }\r\n                let allKeys;\r\n                let allValues;\r\n                transaction.oncomplete = () => {\r\n                    transaction.oncomplete = null;\r\n                    transaction.onerror = null;\r\n                    if (canGetAll) {\r\n                        for (var i = 0; i < allKeys.length; i++) {\r\n                            const key = allKeys[i];\r\n                            const val = allValues[i];\r\n                            this._metaCache.set(key, val);\r\n                            this._nowSize += val.size;\r\n                        }\r\n                    }\r\n                    // Sort in ascending order of expire\r\n                    const sortArray = [];\r\n                    const itelator = this._metaCache.entries();\r\n                    let iteratorResult = itelator.next();\r\n                    while (!iteratorResult.done) {\r\n                        sortArray.push(iteratorResult.value);\r\n                        iteratorResult = itelator.next();\r\n                    }\r\n                    sortArray.sort(function (a, b) {\r\n                        if (a[1].expire < b[1].expire)\r\n                            return -1;\r\n                        if (a[1].expire > b[1].expire)\r\n                            return 1;\r\n                        return 0;\r\n                    });\r\n                    this._metaCache = new Map(sortArray);\r\n                    this._cleanup();\r\n                    resolve();\r\n                };\r\n                transaction.onerror = () => {\r\n                    transaction.oncomplete = null;\r\n                    transaction.onerror = null;\r\n                    resolve();\r\n                };\r\n                // referencing argument's event.target of openCursor() causes memory leak on Safari\r\n                if (canGetAll) {\r\n                    metaStore.getAllKeys().onsuccess = (event) => {\r\n                        allKeys = event.target.result;\r\n                    };\r\n                    metaStore.getAll().onsuccess = (event) => {\r\n                        allValues = event.target.result;\r\n                    };\r\n                }\r\n                else {\r\n                    metaStore.openCursor().onsuccess = (event) => {\r\n                        const cursor = event.target.result;\r\n                        if (cursor) {\r\n                            this._metaCache.set(cursor.key, cursor.value);\r\n                            this._nowSize += cursor.value.size;\r\n                            cursor.continue();\r\n                        }\r\n                        ;\r\n                    };\r\n                }\r\n                ;\r\n            }, () => {\r\n                // Ignore open error\r\n            });\r\n        });\r\n    }\r\n    _cleanup() {\r\n        this._open((db) => {\r\n            const removeKeys = new Set();\r\n            const nowSeconds = Math.floor(Date.now() / 1000);\r\n            let tmpNowCount = this._metaCache.size;\r\n            this._metaCache.forEach((meta, key) => {\r\n                if (meta.expire < nowSeconds || this._maxSize < this._nowSize || this._maxCount < tmpNowCount) {\r\n                    removeKeys.add(key);\r\n                    this._nowSize -= meta.size;\r\n                    tmpNowCount--;\r\n                }\r\n            });\r\n            if (0 < removeKeys.size) {\r\n                const transaction = db.transaction([STORE_NAME.META, STORE_NAME.DATA], 'readwrite');\r\n                const metaStore = transaction.objectStore(STORE_NAME.META);\r\n                const dataStore = transaction.objectStore(STORE_NAME.DATA);\r\n                transaction.oncomplete = () => {\r\n                    transaction.oncomplete = null;\r\n                    transaction.onerror = null;\r\n                    transaction.onabort = null;\r\n                    removeKeys.forEach((key) => {\r\n                        if (this._metaCache.has(key))\r\n                            this._metaCache.delete(key);\r\n                    });\r\n                };\r\n                transaction.onerror = () => {\r\n                    console.error('IndexedDB cleanup failed');\r\n                    transaction.oncomplete = null;\r\n                    transaction.onerror = null;\r\n                    transaction.onabort = null;\r\n                    this._nowSize = 0;\r\n                    this._metaCache.forEach((meta) => {\r\n                        this._nowSize += meta.size;\r\n                    });\r\n                };\r\n                transaction.onabort = () => {\r\n                    console.error('IndexedDB cleanup failed');\r\n                    transaction.oncomplete = null;\r\n                    transaction.onerror = null;\r\n                    transaction.onabort = null;\r\n                    this._nowSize = 0;\r\n                    this._metaCache.forEach((meta) => {\r\n                        this._nowSize += meta.size;\r\n                    });\r\n                };\r\n                removeKeys.forEach((key) => {\r\n                    try {\r\n                        dataStore.delete(key);\r\n                        metaStore.delete(key);\r\n                    }\r\n                    catch (e) {\r\n                        transaction.abort();\r\n                    }\r\n                });\r\n            }\r\n        }, () => {\r\n            // Ignore open error\r\n        });\r\n    }\r\n    _createObjectStore(db, oldVersion) {\r\n        if (oldVersion < 1) {\r\n            // Structure of first edition\r\n            db.createObjectStore(STORE_NAME.META);\r\n            db.createObjectStore(STORE_NAME.DATA);\r\n        }\r\n    }\r\n    _open(success, error) {\r\n        if (!this._indexedDB) {\r\n            error(IDBCache.ERROR.NOT_SUPPORT_IDB);\r\n            return;\r\n        }\r\n        let request = this._indexedDB.open(this._dbName, VERSION);\r\n        request.onupgradeneeded = (event) => {\r\n            request.onupgradeneeded = null;\r\n            this._createObjectStore(request.result, event.oldVersion);\r\n        };\r\n        request.onblocked = () => {\r\n            request.onblocked = null;\r\n            alert('Please close other tabs');\r\n        };\r\n        request.onsuccess = () => {\r\n            request.onupgradeneeded = null;\r\n            request.onblocked = null;\r\n            request.onsuccess = null;\r\n            request.onerror = null;\r\n            try {\r\n                success(request.result);\r\n            }\r\n            catch (e) {\r\n                console.error(e);\r\n                error(IDBCache.ERROR.UNKNOWN);\r\n            }\r\n        };\r\n        request.onerror = () => {\r\n            console.error('IndexedDB open failed');\r\n            request.onupgradeneeded = null;\r\n            request.onblocked = null;\r\n            request.onsuccess = null;\r\n            request.onerror = null;\r\n            error(IDBCache.ERROR.CANNOT_OPEN);\r\n        };\r\n    }\r\n    _serializeData(data, cb) {\r\n        const meta = {\r\n            type: 0,\r\n            size: 0,\r\n        };\r\n        if (typeof data === 'string') {\r\n            meta.type = DATA_TYPE.STRING;\r\n            meta.size = data.length;\r\n        }\r\n        else if (data instanceof ArrayBuffer) {\r\n            meta.type = DATA_TYPE.ARRAYBUFFER;\r\n            meta.size = data.byteLength;\r\n        }\r\n        else if (data instanceof Blob) {\r\n            meta.type = DATA_TYPE.BLOB;\r\n            meta.size = data.size;\r\n        }\r\n        else {\r\n            console.warn('Is not supported type of value');\r\n        }\r\n        // IndexedDB on iOS does not support blob\r\n        if (isIOS && meta.type === DATA_TYPE.BLOB) {\r\n            const reader = new FileReader();\r\n            reader.onload = () => {\r\n                reader.onload = null;\r\n                meta.size = reader.result.byteLength;\r\n                meta.mime = data.type;\r\n                cb(reader.result, meta);\r\n            };\r\n            reader.onerror = () => {\r\n                reader.onerror = null;\r\n                meta.size = 0;\r\n                cb(null, meta);\r\n            };\r\n            reader.readAsArrayBuffer(data);\r\n        }\r\n        else {\r\n            cb(data, meta);\r\n        }\r\n    }\r\n    _deserializeData(data, meta, cb) {\r\n        let type = 0;\r\n        if (typeof data === 'string') {\r\n            type = DATA_TYPE.STRING;\r\n        }\r\n        else if (data instanceof ArrayBuffer) {\r\n            type = DATA_TYPE.ARRAYBUFFER;\r\n        }\r\n        else if (data instanceof Blob) {\r\n            type = DATA_TYPE.BLOB;\r\n        }\r\n        if (meta && meta.type === DATA_TYPE.BLOB && type === DATA_TYPE.ARRAYBUFFER) {\r\n            const blob = new Blob([data], { type: meta.mime });\r\n            cb(blob);\r\n        }\r\n        else {\r\n            cb(data);\r\n        }\r\n    }\r\n}\r\nIDBCache.ERROR = {\r\n    INVALID_ARGUMENT: 1,\r\n    CANNOT_OPEN: 2,\r\n    REQUEST_FAILED: 3,\r\n    GET_EMPTY: 4,\r\n    NOT_SUPPORT_IDB: 5,\r\n    UNKNOWN: 6,\r\n};\r\n"],"names":["VERSION","STORE_NAME","META","DATA","DATA_TYPE","STRING","ARRAYBUFFER","BLOB","isIOS","test","window","navigator","userAgent","IDBCache","dbName","strageLimit","_maxSize","_maxCount","_defaultAge","_nowSize","_metaCache","Map","_indexedDB","indexedDB","webkitIndexedDB","mozIndexedDB","OIndexedDB","msIndexedDB","_dbName","console","error","size","count","defaultAge","_initialization","_initialize","key","value","maxAge","Promise","resolve","reject","_serializeData","data","meta","ERROR","INVALID_ARGUMENT","_open","db","transaction","metaStore","objectStore","dataStore","nowSeconds","Math","floor","Date","now","expire","oncomplete","onerror","onabort","cacheMeta","get","delete","set","_cleanup","REQUEST_FAILED","put","e","abort","errorCode","request","onsuccess","result","_deserializeData","GET_EMPTY","NOT_SUPPORT_IDB","then","Boolean","clear","canGetAll","getAllKeys","getAll","warn","allKeys","allValues","i","length","val","sortArray","itelator","entries","iteratorResult","next","done","push","sort","a","b","event","target","openCursor","cursor","continue","removeKeys","Set","tmpNowCount","forEach","add","has","oldVersion","createObjectStore","success","open","onupgradeneeded","_createObjectStore","onblocked","alert","UNKNOWN","CANNOT_OPEN","cb","type","ArrayBuffer","byteLength","Blob","reader","FileReader","onload","mime","readAsArrayBuffer","blob"],"mappings":"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"}